What happens when you initialize a repository? Why do you need it?
Initializing a repository creates the initial .git directory to contain
a list of all your changelogs (commits) to be used in synchronizing
with the github repo as needed. We need to use this to synchronize with
the online repo otherwise we would not be able to keep track of our progress.

How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area acts as a filter with which to determine what files in
the working directory get documented as a change in the commit. In this
respect the user can use the stanging area to selectively choose files
for a commit, without being limited to having the whole directory forced
to be committed. This allows for the user to not include into the repo
any unnecessary files such as test scripts and binaries which are not part
of the main program, but have been used to help debug/test the program.

How can you use the staging area to make sure you have one commit per logical change?
As previously mentioned, the staging area acts as a filter between the working directory and the repo. In this respect, you may use the staging area to filter out all modifications which do not relate to a logical change, as per the good practices of git commit.

What are some situations when branches would be helpful in keeping your history organized? How would these branches help?
Branches are particularily useful for developing features without compromising the main branch in the case the feature introduces errors. In this case we may easily checkout between the feature branch to work on a feature in progress, however we may leave the master branch alone as it should only contain fully operational code. We may later merge the feature branch with the master branch, once the feature has been fully integrated.

How do the diagrams help you visualize the branch structure?
Diagrams help us visualize the branch structure as the git repo follows a natural tree-based style. By adding branches as parallel running projects we are essentially adding branches within a tree graph. Furthermore, each commit acts as a node in the tree diagram, extending from a prior node based to the root or origin point of the repository. In this respect, it is natural to view the repo commit history as a tree structure and therefore a diagram.





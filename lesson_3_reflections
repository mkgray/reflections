When would you want to use a remote repository rather than keeping all your work
local?
A remote repository offers many advantages, such as developing over multiple machines without having to transfer files the old way. Furthermore, a remote repository on the cloud improves reliability.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
Manual change pulling allows you to work on a frozen instance of the program under development, such that you do not have to worry that code which you are working on is not being significantly changed constantly while you work. In this respect you can concentrate solely on your branch, and isolate the merging/compatability issues after you are ready to push/pull.

Desccribe the differences between forks, clones, and branches. When would you use one instead of another?
Forks: Forks are used to create your own copy of a project. Typically this is used when you want to develop your own spin-off of another project (or simply do not have access to another users project for modifying).
Clones: Cloning is to directly copy a project on GitHub to your local machine. This may directly be a project on GitHub or a project on your own account you have forked. This may also be used to clone code without adding changes to the program.
Branches: Branches are used to develop on a 'separate path' from the master or main branch (which typically is development ready at all times). The usage of branches allows us to develop features in an isolated environment without worrying about breaking the 'production ready' program in the master line.

What is the benefit of having a copy of the last known state of the remote stored locally?
Having a copy of the last known state of the remote stored locally allows us to
checkpoint the last time we have synchronized with the remote repository. This is
particularly useful for cases where we go offline to continue development, such
that we may see the last time we had synchronized with the repo.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
Without the usage of Git or GitHub, we would have to use much more manual version control and collaborative coding techniques, specifically the usage of transferring files via flash drives/CDs/or another online form of storage. In this respect it is much harder to track the changes that people are performing, as comparisons may be harder to make. As well, there is no easy method to track bug reports, and merging would be done typically with less care; as no software acts as an intermediate scanner between differences of prior and current versions.






